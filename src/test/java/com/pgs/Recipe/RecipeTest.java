package com.pgs.Recipe;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import javax.persistence.EntityManager;

import com.pgs.Recipe.model.Difficulty;
import com.pgs.Recipe.model.Ingredient;
import com.pgs.Recipe.model.Rating;
import com.pgs.Recipe.model.Recipe;
import com.pgs.Recipe.service.RecipeService;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class RecipeTest {
    
    @Autowired
    private RecipeService recipeService;

    private Recipe retrievedRecipe;
    private List<Recipe> retrievedRecipes;
    private List<Recipe> expectedRecipes;

    @BeforeEach
    void setUp() {
        expectedRecipes = new ArrayList<>();
    }

    @Test
    void test_thatABlankRecipeCanBeCreated(){
        Recipe newRecipe = new Recipe();
        recipeService.createRecipe(newRecipe);
        assertNotEquals(0, newRecipe.getRecipeId());
    }

    @Test
    void test_thatNewRecipesHaveAnAutoGeneratedId(){
        Recipe firstRecipe = new Recipe();
        Recipe secondRecipe = new Recipe();
        recipeService.createRecipe(firstRecipe);
        recipeService.createRecipe(secondRecipe);
        assertEquals(firstRecipe.getRecipeId()+1, secondRecipe.getRecipeId());
    }

    @Test
    void test_thatARecipeCanBeRetrievedById(){
        retrievedRecipe = recipeService.retrieveById(1);
        assertEquals(1, retrievedRecipe.getRecipeId());
    }

    @Test
    void test_thatARecipeCanBeRetrievedByIdWithoutLazyLoading() {
        Recipe newRecipe = new Recipe("recipeName",5,"hflsdh\nnsdf", new HashMap<Ingredient, String>(), Rating.FOUR, Difficulty.THREE);
        recipeService.createRecipe(newRecipe);
        long id = newRecipe.getRecipeId();
        retrievedRecipe = recipeService.retrieveById(id);
        assertEquals(newRecipe, retrievedRecipe);
    }

    @Test
    void test_thatARecipeCanBeUpdated() {
        String originalName = "Original";
        String updatedName = "update";
        Recipe originalRecipe = new Recipe(originalName,5,"sdklfjd\nsldfjls",new HashMap<Ingredient,String>(), Rating.FOUR, Difficulty.THREE);
        recipeService.createRecipe(originalRecipe);
        originalRecipe.setRecipeName(updatedName);
        recipeService.updateRecipe(originalRecipe);
        retrievedRecipe = recipeService.retrieveById(originalRecipe.getRecipeId());
        assertEquals(updatedName, retrievedRecipe.getRecipeName());
    }

    @Test
    void test_thatARecipeCanBeRetrievedByName(){
        Recipe expectedRecipe = recipeService.retrieveById(1);
        String recipeName = expectedRecipe.getRecipeName();
        Recipe retrievedRecipe = recipeService.retrieveByName(recipeName);
        assertEquals(expectedRecipe, retrievedRecipe );

    }

    @Test
    void test_thatAllRecipesCanBeRetrieved() {
        expectedRecipes.add(recipeService.retrieveById(1));
        expectedRecipes.add(recipeService.retrieveById(2));
        List<Recipe> retrievedRecipes = recipeService.retrieveAllRecipes();
        assertEquals(expectedRecipes, retrievedRecipes);
    }

    @Test
    void test_thatRecipesCanBeRetrievedByRating() {
        expectedRecipes.add(recipeService.retrieveById(2));
        retrievedRecipes = recipeService.retrieveRecipesByRating(Rating.FOUR);
        assertEquals(expectedRecipes, retrievedRecipes);
    }
}
